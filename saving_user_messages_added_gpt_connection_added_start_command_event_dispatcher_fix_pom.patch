Subject: [PATCH] saving user messages added
gpt connection added
start command event/dispatcher
fix pom
---
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision 3965a8b52b2c21f6a7b3864799073d9abdad44ce)
+++ b/pom.xml	(revision 4b5f6751a53d6e39d37d2414a0a68da4acc4a92b)
@@ -54,6 +54,17 @@
             <artifactId>telegrambots</artifactId>
             <version>${telegram.versions}</version>
         </dependency>
+
+        <dependency>
+            <groupId>javax.xml.bind</groupId>
+            <artifactId>jaxb-api</artifactId>
+            <version>2.3.1</version>
+        </dependency>
+        <dependency>
+            <groupId>org.glassfish.jaxb</groupId>
+            <artifactId>jaxb-runtime</artifactId>
+            <version>4.0.4</version>
+        </dependency>
     </dependencies>
 
     <build>
@@ -72,6 +83,4 @@
             </plugin>
         </plugins>
     </build>
-
-
 </project>
Index: src/main/java/com/example/demo/service/RecordServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/demo/service/RecordServiceImpl.java b/src/main/java/com/example/demo/service/RecordServiceImpl.java
--- a/src/main/java/com/example/demo/service/RecordServiceImpl.java	(revision 3965a8b52b2c21f6a7b3864799073d9abdad44ce)
+++ b/src/main/java/com/example/demo/service/RecordServiceImpl.java	(revision ec528f48192d1f9e6a55ff29ea6276babc3decba)
@@ -1,12 +1,16 @@
 package com.example.demo.service;
 
-import com.example.demo.RecordRepository;
-import jakarta.annotation.PostConstruct;
+import com.example.demo.domain.RecordRepository;
+import com.example.demo.domain.Record;
+import com.example.demo.domain.User;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
 import org.springframework.stereotype.Service;
 
+import java.util.Collections;
+import java.util.List;
+
 @Service
 public class RecordServiceImpl implements RecordService {
 
@@ -19,21 +23,22 @@
 
     @Override
     public Page<Record> getPagedRecords(Pageable pageable) {
-        return null;
-    }
-
-    public Page<Record> getPagedPrompts(Pageable pageable) {
         return recordRepository.findAll(pageable);
     }
 
-    @PostConstruct
-    public void init() {
-        for (int i = 0; i < 10; i++) {
-            Record r = new Record();
-            r.setText("test text here " + i);
-            saveRecord(r);
-        }
+    public List<Record> getLast10(User user) {
+        List<Record> list = recordRepository.findTop10ByUser_IdOrderByCreatedDesc(user.getId());
+        Collections.reverse(list);
+        return list;
     }
+//    @PostConstruct
+//    public void init() {
+//        for (int i = 0; i < 10; i++) {
+//            Record r = new Record();
+//            r.setText("test text here " + i);
+//            saveRecord(r);
+//        }
+//    }
 }
 
 
Index: src/main/java/com/example/demo/RecordController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/demo/RecordController.java b/src/main/java/com/example/demo/RecordController.java
--- a/src/main/java/com/example/demo/RecordController.java	(revision 4b5f6751a53d6e39d37d2414a0a68da4acc4a92b)
+++ b/src/main/java/com/example/demo/RecordController.java	(revision cd84857242acb85d2e31437c3ac8d532500654b4)
@@ -1,6 +1,6 @@
 package com.example.demo;
 
-import com.example.demo.service.Record;
+import com.example.demo.domain.Record;
 import com.example.demo.service.RecordService;
 import jakarta.validation.Valid;
 import org.springframework.beans.factory.annotation.Autowired;
Index: src/main/java/com/example/demo/config/BotInitializer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/demo/config/BotInitializer.java b/src/main/java/com/example/demo/config/BotInitializer.java
--- a/src/main/java/com/example/demo/config/BotInitializer.java	(revision 4b5f6751a53d6e39d37d2414a0a68da4acc4a92b)
+++ b/src/main/java/com/example/demo/config/BotInitializer.java	(revision cd84857242acb85d2e31437c3ac8d532500654b4)
@@ -1,6 +1,6 @@
 package com.example.demo.config;
 
-import com.example.demo.service.TelegramBot;
+import com.example.demo.service.TelegramBotService;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.event.ContextRefreshedEvent;
@@ -17,13 +17,13 @@
 public class BotInitializer {
 
     @Autowired
-    TelegramBot bot;
+    TelegramBotService telegramBotService;
 
     @EventListener({ContextRefreshedEvent.class})
     public void init() throws TelegramApiException {
         TelegramBotsApi telegramBotsApi = new TelegramBotsApi(DefaultBotSession.class);
         try {
-            telegramBotsApi.registerBot((LongPollingBot) bot);
+            telegramBotsApi.registerBot((LongPollingBot) telegramBotService);
         } catch (TelegramApiException e) {
             log.error("Error occurred: " + e.getMessage());
         }
Index: src/main/java/com/example/demo/service/Record.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/demo/service/Record.java b/src/main/java/com/example/demo/domain/Record.java
rename from src/main/java/com/example/demo/service/Record.java
rename to src/main/java/com/example/demo/domain/Record.java
--- a/src/main/java/com/example/demo/service/Record.java	(revision 4b5f6751a53d6e39d37d2414a0a68da4acc4a92b)
+++ b/src/main/java/com/example/demo/domain/Record.java	(revision ec528f48192d1f9e6a55ff29ea6276babc3decba)
@@ -1,8 +1,6 @@
-package com.example.demo.service;
+package com.example.demo.domain;
 
-import jakarta.persistence.Entity;
-import jakarta.persistence.GeneratedValue;
-import jakarta.persistence.Id;
+import jakarta.persistence.*;
 import lombok.AllArgsConstructor;
 import lombok.Builder;
 import lombok.Data;
@@ -23,6 +21,11 @@
     @Id
     private UUID id;
 
+    @ManyToOne
+    private User user;
+
+    private MessageType messageType;
+
     @CreationTimestamp
     private LocalDateTime created;
 
Index: src/main/java/com/example/demo/RecordRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/demo/RecordRepository.java b/src/main/java/com/example/demo/domain/RecordRepository.java
rename from src/main/java/com/example/demo/RecordRepository.java
rename to src/main/java/com/example/demo/domain/RecordRepository.java
--- a/src/main/java/com/example/demo/RecordRepository.java	(revision 4b5f6751a53d6e39d37d2414a0a68da4acc4a92b)
+++ b/src/main/java/com/example/demo/domain/RecordRepository.java	(revision ec528f48192d1f9e6a55ff29ea6276babc3decba)
@@ -1,11 +1,14 @@
-package com.example.demo;
+package com.example.demo.domain;
 
-import com.example.demo.service.Record;
+import com.example.demo.domain.Record;
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.stereotype.Repository;
 
+import java.awt.print.Pageable;
+import java.util.List;
 import java.util.UUID;
 
 @Repository
 public interface RecordRepository extends JpaRepository<Record, UUID> {
+    List<Record> findTop10ByUser_IdOrderByCreatedDesc(UUID userId);
 }
Index: src/main/java/com/example/demo/domain/TelegramUser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/demo/domain/TelegramUser.java b/src/main/java/com/example/demo/domain/TelegramUser.java
new file mode 100644
--- /dev/null	(revision cd84857242acb85d2e31437c3ac8d532500654b4)
+++ b/src/main/java/com/example/demo/domain/TelegramUser.java	(revision cd84857242acb85d2e31437c3ac8d532500654b4)
@@ -0,0 +1,26 @@
+package com.example.demo.domain;
+
+import jakarta.persistence.Entity;
+import jakarta.persistence.Id;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Data
+@Entity
+@NoArgsConstructor
+@AllArgsConstructor
+@Builder
+public class TelegramUser {
+    @Id
+    private Long id;
+
+    private String firstName;
+
+    private String lastName;
+
+    private String userName;
+
+    private String languageCode;
+}
Index: src/main/java/com/example/demo/domain/TelegramUserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/demo/domain/TelegramUserRepository.java b/src/main/java/com/example/demo/domain/TelegramUserRepository.java
new file mode 100644
--- /dev/null	(revision cd84857242acb85d2e31437c3ac8d532500654b4)
+++ b/src/main/java/com/example/demo/domain/TelegramUserRepository.java	(revision cd84857242acb85d2e31437c3ac8d532500654b4)
@@ -0,0 +1,10 @@
+package com.example.demo.domain;
+
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
+
+import java.util.UUID;
+
+@Repository
+public interface TelegramUserRepository extends JpaRepository<User, UUID> {
+}
Index: src/main/java/com/example/demo/domain/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/demo/domain/User.java b/src/main/java/com/example/demo/domain/User.java
new file mode 100644
--- /dev/null	(revision cd84857242acb85d2e31437c3ac8d532500654b4)
+++ b/src/main/java/com/example/demo/domain/User.java	(revision cd84857242acb85d2e31437c3ac8d532500654b4)
@@ -0,0 +1,24 @@
+package com.example.demo.domain;
+
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.util.UUID;
+
+@Data
+@Entity
+@NoArgsConstructor
+@AllArgsConstructor
+@Builder
+@Table(name = "`user`")
+public class User {
+    @GeneratedValue
+    @Id
+    private UUID id;
+
+    @OneToOne(cascade = CascadeType.ALL)
+    private TelegramUser telegramUser;
+}
Index: src/main/java/com/example/demo/domain/UserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/demo/domain/UserRepository.java b/src/main/java/com/example/demo/domain/UserRepository.java
new file mode 100644
--- /dev/null	(revision cd84857242acb85d2e31437c3ac8d532500654b4)
+++ b/src/main/java/com/example/demo/domain/UserRepository.java	(revision cd84857242acb85d2e31437c3ac8d532500654b4)
@@ -0,0 +1,12 @@
+package com.example.demo.domain;
+
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
+
+import java.util.Optional;
+import java.util.UUID;
+
+@Repository
+public interface UserRepository extends JpaRepository<User, UUID> {
+    Optional<User> findByTelegramUser_Id(Long telegramUserId);
+}
Index: src/main/java/com/example/demo/events/StartCommandEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/demo/events/StartCommandEvent.java b/src/main/java/com/example/demo/events/StartCommandEvent.java
new file mode 100644
--- /dev/null	(revision ec528f48192d1f9e6a55ff29ea6276babc3decba)
+++ b/src/main/java/com/example/demo/events/StartCommandEvent.java	(revision ec528f48192d1f9e6a55ff29ea6276babc3decba)
@@ -0,0 +1,14 @@
+package com.example.demo.events;
+
+import com.example.demo.domain.MessageType;
+
+public class StartCommandEvent extends MessageContainerEvent {
+
+    public StartCommandEvent(Object source) {
+        super(source);
+    }
+
+    public  MessageType getMessageType() {
+        return MessageType.fromUser;
+    }
+}
Index: src/main/java/com/example/demo/service/Dispatcher.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/demo/service/Dispatcher.java b/src/main/java/com/example/demo/service/Dispatcher.java
new file mode 100644
--- /dev/null	(revision ec528f48192d1f9e6a55ff29ea6276babc3decba)
+++ b/src/main/java/com/example/demo/service/Dispatcher.java	(revision ec528f48192d1f9e6a55ff29ea6276babc3decba)
@@ -0,0 +1,111 @@
+package com.example.demo.service;
+
+import com.example.demo.domain.MessageType;
+import com.example.demo.domain.Record;
+import com.example.demo.domain.User;
+import com.example.demo.events.*;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.context.event.EventListener;
+import org.springframework.stereotype.Component;
+
+import java.util.stream.Collectors;
+
+@Component
+@Slf4j
+public class Dispatcher {
+
+    @Value("${debug:false}")
+    private boolean debugMode;
+
+    @Autowired
+    UserService userService;
+
+    @Autowired
+    TelegramBotService telegramBotService;
+
+    @Autowired
+    ChatGptService chatGptService;
+
+    @Autowired
+    RecordService recordService;
+
+    @EventListener
+    void onStartMessageReceived(StartCommandEvent event) {
+        User user = getUser(event);
+        telegramBotService.sendMessage(
+                event.getChatId(),
+                "Hi, "
+                        + user.getTelegramUser().getFirstName()
+                        + ", nice to meet you!"
+        );
+        if (debugMode) {
+            telegramBotService.sendMessage(
+                    event.getChatId(),
+                    "User data saved: "
+                            + user.toString()
+            );
+        }
+    }
+
+    @EventListener
+    void onTextMessageReceived(TextMessageEvent event) {
+        User user = getUser(event);
+        try {
+            telegramBotService.sendMessage(
+                    event.getChatId(),
+                    chatGptService.getOpenaiResponse(
+                            getSystemPrompt(user),
+                            event.getMessageText()
+                    )
+            );
+        } catch (Exception error) {
+            if (debugMode) {
+                telegramBotService.sendMessage(
+                        event.getChatId(),
+                        error.toString()
+                );
+            }
+            log.debug(error.toString());
+        }
+    }
+
+    private User getUser(MessageContainerEvent event) {
+        return userService.addOrCreateTelegramUser(event.getFrom());
+    }
+
+    private String getSystemPrompt(User user) {
+        return "Make connection to user " + user.getTelegramUser().getFirstName()
+                + " on language " + user.getTelegramUser().getLanguageCode()
+                + " history: " + recordService.getLast10(user).stream().map(
+                        r -> (r.getMessageType() == MessageType.fromBot
+                                ? "Chat GPT: "
+                                : r.getUser().getTelegramUser().getFirstName() + ": ")
+
+                + r.getText()
+                ).collect(Collectors.joining(" "));
+    }
+
+    @EventListener
+    void onPhotoMessageReceived(PhotoMessageEvent event) {
+        telegramBotService.sendMessage(
+                event.getChatId(),
+                "Sorry, i can not understand photo messages, but we working on it."
+        );
+    }
+
+    @EventListener
+    void onAnyMessage(MessageContainerEvent event) {
+        log.info("onAnyMessage: " + event.toString());
+        User user = getUser(event);
+        Record r = new Record();
+        r.setUser(user);
+        r.setMessageType(event.getMessageType());
+        r.setText(event.getMessageText());
+
+        r = recordService.saveRecord(r);
+
+        log.info(r.toString());
+    }
+}
Index: src/main/java/com/example/demo/service/RecordService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/demo/service/RecordService.java b/src/main/java/com/example/demo/service/RecordService.java
--- a/src/main/java/com/example/demo/service/RecordService.java	(revision 4b5f6751a53d6e39d37d2414a0a68da4acc4a92b)
+++ b/src/main/java/com/example/demo/service/RecordService.java	(revision ec528f48192d1f9e6a55ff29ea6276babc3decba)
@@ -1,10 +1,16 @@
 package com.example.demo.service;
 
+import com.example.demo.domain.Record;
+import com.example.demo.domain.User;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
 
+import java.util.List;
+
 public interface RecordService {
     Record saveRecord(Record record);
 
     Page<Record> getPagedRecords(Pageable pageable);
+
+    public List<Record> getLast10(User user);
 }
Index: src/main/java/com/example/demo/service/TelegramBot.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/demo/service/TelegramBot.java b/src/main/java/com/example/demo/service/TelegramBotService.java
rename from src/main/java/com/example/demo/service/TelegramBot.java
rename to src/main/java/com/example/demo/service/TelegramBotService.java
--- a/src/main/java/com/example/demo/service/TelegramBot.java	(revision 4b5f6751a53d6e39d37d2414a0a68da4acc4a92b)
+++ b/src/main/java/com/example/demo/service/TelegramBotService.java	(revision b60e626bd4c024d8aaf37d3ade39d6d472350a10)
@@ -1,7 +1,12 @@
 package com.example.demo.service;
 
 import com.example.demo.config.BotConfig;
+import com.example.demo.events.PhotoMessageEvent;
+import com.example.demo.events.StartCommandEvent;
+import com.example.demo.events.TextMessageEvent;
 import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.ApplicationEventPublisher;
 import org.springframework.stereotype.Component;
 import org.telegram.telegrambots.bots.TelegramLongPollingBot;
 import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
@@ -16,21 +21,29 @@
 
 @Component
 @Slf4j
-public class TelegramBot extends TelegramLongPollingBot {
+public class TelegramBotService extends TelegramLongPollingBot {
+
+    @Autowired
+    ApplicationEventPublisher eventPublisher;
 
     final BotConfig config;
 
-    public TelegramBot(BotConfig config) {
-        log.info(config.getBotName());
+    public TelegramBotService(BotConfig config) {
         this.config = config;
-        List<BotCommand> listofCommands = new ArrayList<>();
-        listofCommands.add(new BotCommand("/start", "get a welcome message"));
-//        listofCommands.add(new BotCommand("/mydata", "get your data stored"));
-//        listofCommands.add(new BotCommand("/deletedata", "delete my data"));
-//        listofCommands.add(new BotCommand("/help", "info how to use this bot"));
-//        listofCommands.add(new BotCommand("/settings", "set your preferences"));
+        List<BotCommand> botCommandList = new ArrayList<>();
+        botCommandList.add(new BotCommand("/start", "get a welcome message"));
+//        botCommandList.add(new BotCommand("/mydata", "get your data stored"));
+//        botCommandList.add(new BotCommand("/deletedata", "delete my data"));
+//        botCommandList.add(new BotCommand("/help", "info how to use this bot"));
+//        botCommandList.add(new BotCommand("/settings", "set your preferences"));
         try {
-            this.execute(new SetMyCommands(listofCommands, new BotCommandScopeDefault(), null));
+            this.execute(
+                    new SetMyCommands(
+                            botCommandList,
+                            new BotCommandScopeDefault(),
+                            null
+                    )
+            );
         } catch (TelegramApiException e) {
             log.error("Error setting bot's command list: " + e.getMessage());
         }
@@ -48,31 +61,33 @@
 
     @Override
     public void onUpdateReceived(Update update) {
-
+        if (update.hasMessage() && update.getMessage().hasPhoto()) {
+            eventPublisher.publishEvent(
+                    new PhotoMessageEvent(update.getMessage())
+            );
+        }
         if (update.hasMessage() && update.getMessage().hasText()) {
             String messageText = update.getMessage().getText();
-            long chatId = update.getMessage().getChatId();
 
             switch (messageText) {
                 case "/start":
-
-                    startCommandReceived(chatId, update.getMessage().getChat().getFirstName());
+                    eventPublisher.publishEvent(
+                            new StartCommandEvent(
+                                    update.getMessage()
+                            )
+                    );
                     break;
                 default:
-
-                    sendMessage(chatId, "Sorry, command was not recognised");
+                    eventPublisher.publishEvent(
+                            new TextMessageEvent(
+                                    update.getMessage()
+                            )
+                    );
             }
-
         }
     }
 
-    private void startCommandReceived(long chatId, String name) {
-        String answer = "Hi, " + name + ", nice to meet you!";
-
-        sendMessage(chatId, answer);
-    }
-
-    private void sendMessage(long chatId, String textToSend) {
+    public void sendMessage(long chatId, String textToSend) {
         SendMessage message = new SendMessage();
         message.setChatId(String.valueOf(chatId));
         message.setText(textToSend);
Index: src/main/java/com/example/demo/service/UserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/demo/service/UserService.java b/src/main/java/com/example/demo/service/UserService.java
new file mode 100644
--- /dev/null	(revision cd84857242acb85d2e31437c3ac8d532500654b4)
+++ b/src/main/java/com/example/demo/service/UserService.java	(revision cd84857242acb85d2e31437c3ac8d532500654b4)
@@ -0,0 +1,9 @@
+package com.example.demo.service;
+
+import com.example.demo.domain.User;
+import org.springframework.stereotype.Service;
+
+@Service
+public interface UserService {
+    User addOrCreateTelegramUser(org.telegram.telegrambots.meta.api.objects.User telegramUser);
+}
Index: src/main/java/com/example/demo/service/UserServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/demo/service/UserServiceImpl.java b/src/main/java/com/example/demo/service/UserServiceImpl.java
new file mode 100644
--- /dev/null	(revision cd84857242acb85d2e31437c3ac8d532500654b4)
+++ b/src/main/java/com/example/demo/service/UserServiceImpl.java	(revision cd84857242acb85d2e31437c3ac8d532500654b4)
@@ -0,0 +1,31 @@
+package com.example.demo.service;
+
+import com.example.demo.domain.TelegramUser;
+import com.example.demo.domain.User;
+import com.example.demo.domain.UserRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+@Service
+public class UserServiceImpl implements UserService {
+
+    @Autowired
+    UserRepository userRepository;
+
+
+    public User addOrCreateTelegramUser(org.telegram.telegrambots.meta.api.objects.User telegramUser) {
+        return userRepository.findByTelegramUser_Id(
+                telegramUser.getId()
+        ).orElseGet(() -> userRepository.save(
+                new User(null,
+                        new TelegramUser(
+                                telegramUser.getId(),
+                                telegramUser.getFirstName(),
+                                telegramUser.getLastName(),
+                                telegramUser.getUserName(),
+                                telegramUser.getLanguageCode()
+                        )
+                )
+        ));
+    }
+}
Index: src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
--- a/src/main/resources/application.properties	(revision 4b5f6751a53d6e39d37d2414a0a68da4acc4a92b)
+++ b/src/main/resources/application.properties	(revision ec528f48192d1f9e6a55ff29ea6276babc3decba)
@@ -1,8 +1,10 @@
+debug=false
 bot.key=6815589185:AAF_w2-RoISqsCfm3X4QEKtPDD1hu91Wzl0
 bot.name=AI_ChatGPT_Diary_bot
 bot.owner=6815589185
 
-openai.key=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
+openai.org=org-iKRJ5VIty7EzzvaOZMiMfQ7n
+openai.key=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
 
 server.port=8082
 
@@ -13,4 +15,4 @@
 spring.datasource.username=anastasijaizv
 spring.h2.console.enabled=true
 spring.jpa.hibernate.ddl-auto=update
-spring.jpa.show-sql=true
\ No newline at end of file
+spring.jpa.show-sql=false
\ No newline at end of file
Index: src/main/java/com/example/demo/DemoApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/demo/DemoApplication.java b/src/main/java/com/example/demo/DemoApplication.java
--- a/src/main/java/com/example/demo/DemoApplication.java	(revision cd84857242acb85d2e31437c3ac8d532500654b4)
+++ b/src/main/java/com/example/demo/DemoApplication.java	(revision b60e626bd4c024d8aaf37d3ade39d6d472350a10)
@@ -1,29 +1,11 @@
 package com.example.demo;
 
-import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
-import org.springframework.context.annotation.Bean;
-import org.springframework.web.client.RestTemplate;
 
 @SpringBootApplication
 public class DemoApplication {
-    @Value("${openai.key}")
-    private String openaiApiKey;
-
     public static void main(String[] args) {
         SpringApplication.run(DemoApplication.class, args);
     }
-
-    @Bean
-    public RestTemplate restTemplate() {
-        RestTemplate restTemplate = new RestTemplate();
-        restTemplate.getInterceptors().add(((request, body, execution) -> {
-            request.getHeaders().add("Authorization",
-                    "Bearer " + openaiApiKey);
-
-            return execution.execute(request, body);
-        }));
-        return restTemplate;
-    }
 }
Index: src/main/java/com/example/demo/config/GptConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/demo/config/GptConfig.java b/src/main/java/com/example/demo/config/GptConfig.java
new file mode 100644
--- /dev/null	(revision ec528f48192d1f9e6a55ff29ea6276babc3decba)
+++ b/src/main/java/com/example/demo/config/GptConfig.java	(revision ec528f48192d1f9e6a55ff29ea6276babc3decba)
@@ -0,0 +1,29 @@
+package com.example.demo.config;
+
+import lombok.extern.java.Log;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.web.client.RestTemplate;
+
+@Configuration
+@Log
+public class GptConfig {
+    @Value("${openai.key}")
+    private String openaiApiKey;
+
+    @Bean
+    public RestTemplate restTemplate() {
+        RestTemplate restTemplate = new RestTemplate();
+
+        restTemplate.getInterceptors().add(((request, body, execution) -> {
+            request.getHeaders().add(
+                    "Authorization",
+                    "Bearer " + openaiApiKey
+            );
+            return execution.execute(request, body);
+        }));
+
+        return restTemplate;
+    }
+}
Index: src/main/java/com/example/demo/events/MessageContainerEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/demo/events/MessageContainerEvent.java b/src/main/java/com/example/demo/events/MessageContainerEvent.java
new file mode 100644
--- /dev/null	(revision ec528f48192d1f9e6a55ff29ea6276babc3decba)
+++ b/src/main/java/com/example/demo/events/MessageContainerEvent.java	(revision ec528f48192d1f9e6a55ff29ea6276babc3decba)
@@ -0,0 +1,32 @@
+package com.example.demo.events;
+
+import com.example.demo.domain.MessageType;
+import org.springframework.context.ApplicationEvent;
+import org.springframework.stereotype.Component;
+import org.telegram.telegrambots.meta.api.objects.Message;
+import org.telegram.telegrambots.meta.api.objects.User;
+
+@Component
+abstract public class MessageContainerEvent extends ApplicationEvent{
+    public MessageContainerEvent(Object source) {
+        super(source);
+    }
+
+    protected Message getMessage() {
+        return (Message) getSource();
+    }
+
+    public User getFrom() {
+        return getMessage().getFrom();
+    }
+
+    public long getChatId() {
+        return getMessage().getChatId();
+    }
+
+    public String getMessageText() {
+        return getMessage().getText();
+    }
+
+    abstract public MessageType getMessageType();
+}
Index: src/main/java/com/example/demo/events/PhotoMessageEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/demo/events/PhotoMessageEvent.java b/src/main/java/com/example/demo/events/PhotoMessageEvent.java
new file mode 100644
--- /dev/null	(revision ec528f48192d1f9e6a55ff29ea6276babc3decba)
+++ b/src/main/java/com/example/demo/events/PhotoMessageEvent.java	(revision ec528f48192d1f9e6a55ff29ea6276babc3decba)
@@ -0,0 +1,15 @@
+package com.example.demo.events;
+
+import com.example.demo.domain.MessageType;
+import org.telegram.telegrambots.meta.api.objects.Message;
+
+public class PhotoMessageEvent extends MessageContainerEvent {
+    public PhotoMessageEvent(Message message) {
+        super(message);
+    }
+
+    @Override
+    public MessageType getMessageType() {
+        return MessageType.photo;
+    }
+}
Index: src/main/java/com/example/demo/events/TextMessageEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/demo/events/TextMessageEvent.java b/src/main/java/com/example/demo/events/TextMessageEvent.java
new file mode 100644
--- /dev/null	(revision ec528f48192d1f9e6a55ff29ea6276babc3decba)
+++ b/src/main/java/com/example/demo/events/TextMessageEvent.java	(revision ec528f48192d1f9e6a55ff29ea6276babc3decba)
@@ -0,0 +1,14 @@
+package com.example.demo.events;
+
+import com.example.demo.domain.MessageType;
+
+public class TextMessageEvent extends MessageContainerEvent {
+    public TextMessageEvent(Object source) {
+        super(source);
+    }
+
+    @Override
+    public MessageType getMessageType() {
+        return MessageType.fromUser;
+    }
+}
Index: src/main/java/com/example/demo/message/ChatCompletionRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/demo/message/ChatCompletionRequest.java b/src/main/java/com/example/demo/message/ChatCompletionRequest.java
--- a/src/main/java/com/example/demo/message/ChatCompletionRequest.java	(revision cd84857242acb85d2e31437c3ac8d532500654b4)
+++ b/src/main/java/com/example/demo/message/ChatCompletionRequest.java	(revision b60e626bd4c024d8aaf37d3ade39d6d472350a10)
@@ -10,12 +10,14 @@
     private String model;
     private List<ChatMessage> messages;
 
-
-    public ChatCompletionRequest(String model,
-                                 String prompt) {
+    public <userMessage> ChatCompletionRequest(
+            String model,
+            String systemPrompt,
+            String userMessage
+    ) {
         this.model = model;
         this.messages = new ArrayList<>();
-        this.messages.add(new ChatMessage("user", prompt));
-
+        this.messages.add(new ChatMessage("system", systemPrompt));
+        this.messages.add(new ChatMessage("user", userMessage));
     }
 }
Index: src/main/java/com/example/demo/message/MessageController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/demo/message/MessageController.java b/src/main/java/com/example/demo/message/MessageController.java
--- a/src/main/java/com/example/demo/message/MessageController.java	(revision cd84857242acb85d2e31437c3ac8d532500654b4)
+++ b/src/main/java/com/example/demo/message/MessageController.java	(revision b60e626bd4c024d8aaf37d3ade39d6d472350a10)
@@ -1,29 +1,25 @@
 package com.example.demo.message;
 
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.web.bind.annotation.PostMapping;
-import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RestController;
-import org.springframework.web.client.RestTemplate;
 
 @RestController
 public class MessageController {
-    @Autowired
-    RestTemplate restTemplate;
-
-    @PostMapping("/hitOpenaiAPi")
-    public String getOpenaiResponse(@RequestBody String prompt) {
-        ChatCompletionRequest chatCompletionRequest
-                = new ChatCompletionRequest("gpt-3.5-turbo", prompt);
-
-        ChatCompletionResponse response =
-                restTemplate.postForObject
-                        ("https://api.openai.com/v1/chat/completions", chatCompletionRequest,
-                                ChatCompletionResponse.class);
-
-        assert response != null;
-        return response.getChoices().get(0).getMessage().getContent();
-    }
-
-
+//    @Autowired
+//    RestTemplate restTemplate;
+//
+//    @PostMapping("/hitOpenaiAPi")
+//    public String getOpenaiResponse(@RequestBody String prompt) {
+//        ChatCompletionRequest chatCompletionRequest
+//                = new ChatCompletionRequest("gpt-3.5-turbo", prompt);
+//
+//        ChatCompletionResponse response =
+//                restTemplate.postForObject(
+//                        "https://api.openai.com/v1/chat/completions",
+//                        chatCompletionRequest,
+//                        ChatCompletionResponse.class
+//                );
+//
+//        assert response != null;
+//        return response.getChoices().get(0).getMessage().getContent();
+//    }
 }
Index: src/main/java/com/example/demo/service/ChatGptService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/demo/service/ChatGptService.java b/src/main/java/com/example/demo/service/ChatGptService.java
new file mode 100644
--- /dev/null	(revision b60e626bd4c024d8aaf37d3ade39d6d472350a10)
+++ b/src/main/java/com/example/demo/service/ChatGptService.java	(revision b60e626bd4c024d8aaf37d3ade39d6d472350a10)
@@ -0,0 +1,8 @@
+package com.example.demo.service;
+
+import org.springframework.stereotype.Service;
+
+@Service
+public interface ChatGptService {
+    String getOpenaiResponse(String system, String prompt);
+}
Index: src/main/java/com/example/demo/service/ChatGptServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/demo/service/ChatGptServiceImpl.java b/src/main/java/com/example/demo/service/ChatGptServiceImpl.java
new file mode 100644
--- /dev/null	(revision ec528f48192d1f9e6a55ff29ea6276babc3decba)
+++ b/src/main/java/com/example/demo/service/ChatGptServiceImpl.java	(revision ec528f48192d1f9e6a55ff29ea6276babc3decba)
@@ -0,0 +1,34 @@
+package com.example.demo.service;
+
+import com.example.demo.message.ChatCompletionRequest;
+import com.example.demo.message.ChatCompletionResponse;
+import lombok.extern.java.Log;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+import org.springframework.web.client.RestTemplate;
+
+@Service
+@Log
+public class ChatGptServiceImpl implements ChatGptService {
+
+    @Autowired
+    RestTemplate restTemplate;
+
+    public String getOpenaiResponse(String system, String prompt) {
+        log.info(system);
+        ChatCompletionRequest chatCompletionRequest = new ChatCompletionRequest(
+                "gpt-3.5-turbo",
+                system,
+                prompt
+        );
+
+        ChatCompletionResponse response = restTemplate.postForObject(
+                "https://api.openai.com/v1/chat/completions",
+                chatCompletionRequest,
+                ChatCompletionResponse.class
+        );
+
+        assert response != null;
+        return response.getChoices().get(0).getMessage().getContent();
+    }
+}
Index: src/main/java/com/example/demo/domain/MessageType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/demo/domain/MessageType.java b/src/main/java/com/example/demo/domain/MessageType.java
new file mode 100644
--- /dev/null	(revision ec528f48192d1f9e6a55ff29ea6276babc3decba)
+++ b/src/main/java/com/example/demo/domain/MessageType.java	(revision ec528f48192d1f9e6a55ff29ea6276babc3decba)
@@ -0,0 +1,7 @@
+package com.example.demo.domain;
+
+public enum MessageType {
+    fromBot,
+    fromUser,
+    photo
+}
